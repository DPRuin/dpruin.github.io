{"meta":{"title":"DPRuin","subtitle":"求知若饥，虚心若愚","description":"嗨，我是大朋（DPRuin），一名iOS开发者。","author":"DPRuin","url":"http://dpruin.github.io"},"pages":[{"title":"tags","date":"2016-10-18T01:41:24.000Z","updated":"2016-10-21T14:59:17.000Z","comments":true,"path":"tags/index.html","permalink":"http://dpruin.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Xcode8上传AppStore 构建版本不显示问题","slug":"appstore_buildversion","date":"2017-01-13T02:30:06.000Z","updated":"2017-01-13T03:29:24.000Z","comments":true,"path":"2017/01/13/appstore_buildversion/","link":"","permalink":"http://dpruin.github.io/2017/01/13/appstore_buildversion/","excerpt":"","text":"Xcode8上传AppStore 构建版本不显示问题问题经过使用xcode8打包上传公司的app，app上架–&gt;Archive–&gt;validate–&gt;upload，并且SUCCESSFUL了。官网选项构建版本时蛋疼的事情就来了，构建版本不显示，一致处于如下状态 然后修改版本，重新上传，活动–所有构建版本，显示构建的版本正在处理，过一会又消失了，又不显示此构建版本 提交了多次，等了一宿，第二天构建版本还是没有显示 参考分析参考资料发现，从iOS10开始,苹果更加注重对用于隐私的保护,app里边如果需要访问用户隐私,必须要做隐私权限配置 解决问题 麦克风权限：Privacy - Microphone Usage Description 是否允许此App使用你的麦克风？ 相机权限： Privacy - Camera Usage Description 是否允许此App使用你的相机？ 相册权限： Privacy - Photo Library Usage Description 是否允许此App访问你的媒体资料库? 通讯录权限： Privacy - Contacts Usage Description 是否允许此App访问你的通讯录？ 蓝牙权限：Privacy - Bluetooth Peripheral Usage Description 是否许允此App使用蓝牙？ 语音转文字权限：Privacy - Speech Recognition Usage Description 是否允许此App使用语音识别？ 日历权限：Privacy - Calendars Usage Description 是否允许此App使用日历？ 定位权限：Privacy - Location When In Use Usage Description 我们需要通过您的地理位置信息获取您周边的相关数据 定位权限: Privacy - Location Always Usage Description 我们需要通过您的地理位置信息获取您周边的相关数据 其中麦克风，相机，相册三项必须添加，不然构建版本还是不显示!!!! 添加隐私权限配置后，重新上传，过一会儿，构建版本就出现了","categories":[],"tags":[{"name":"Error","slug":"Error","permalink":"http://dpruin.github.io/tags/Error/"},{"name":"Xcode","slug":"Xcode","permalink":"http://dpruin.github.io/tags/Xcode/"},{"name":"AppStore","slug":"AppStore","permalink":"http://dpruin.github.io/tags/AppStore/"}],"keywords":[]},{"title":"Cocopods_Expected identifier or \"(\"    ,Expected a type","slug":"Cocopods_Expected identifier","date":"2016-12-20T06:15:21.000Z","updated":"2016-12-20T06:23:42.000Z","comments":true,"path":"2016/12/20/Cocopods_Expected identifier/","link":"","permalink":"http://dpruin.github.io/2016/12/20/Cocopods_Expected identifier/","excerpt":"","text":"Cocopods_Expected identifier or “(“ ,Expected a type问题Parse Issue：Expected identifier or “(“ ,Expected a type 分析与参考参考： http://www.egeek.me/2013/01/26/note-about-building-cocoapods-powered-ios-projects/参考以上windows 和OSX系统不同,因 rsa.h文件未正常引入导致，还和cocopods有关系 解决方法cd到项目目录 执行pod update操作 12345678910youbaobaodeMac-mini:~ youbaobao$ pod --version1.0.1youbaobaodeMac-mini:~ youbaobao$ cd ......youbaobaodeMac-mini:sourceCode youbaobao$ pod updateUpdate all podsRe-creating CocoaPods due to major version update.Setting up CocoaPods master repo[!] Unable to add a source with url `https://github.com/CocoaPods/Specs.git` named `master-1`.You can try adding it manually in `~/.cocoapods/repos` or via `pod repo add`.youbaobaodeMac-mini:sourceCode youbaobao$","categories":[],"tags":[{"name":"bug","slug":"bug","permalink":"http://dpruin.github.io/tags/bug/"},{"name":"Cocopods","slug":"Cocopods","permalink":"http://dpruin.github.io/tags/Cocopods/"},{"name":"Xcode","slug":"Xcode","permalink":"http://dpruin.github.io/tags/Xcode/"}],"keywords":[]},{"title":"AppStore上架报ERROR ITMS-90535","slug":"Archive_ERRORITEMS-90535","date":"2016-10-21T13:30:06.000Z","updated":"2016-10-24T11:43:53.000Z","comments":true,"path":"2016/10/21/Archive_ERRORITEMS-90535/","link":"","permalink":"http://dpruin.github.io/2016/10/21/Archive_ERRORITEMS-90535/","excerpt":"","text":"AppStore上架报ERROR ITMS-90535错误错误经过使用xcode7打包上传公司的app，app上架–&gt;Archive–&gt;validate过后，并且SUCCESSFUL了。然后开始上传到AppStore时，出现以下错误 This action could not be completed. Try again This action could not be completed. Try again.(-22421) ERROR ITMS-90535错误 分析 “This action could not be completed. Try again”报错是苹果服务器的原因， 再试一次就好了。我是重复了2次就好了，换了时间段重新上传的就成功了 “ERROR ITMS-90535”根据报错的信息是EaseUIResource.Bundle文件出错 解决问题找到相应的bundle包，打开plist文件，删除CFBundleExecutable即可 CFBundleExecutable 在info.plist文件中显示为Executable file","categories":[],"tags":[{"name":"Archive","slug":"Archive","permalink":"http://dpruin.github.io/tags/Archive/"},{"name":"Error","slug":"Error","permalink":"http://dpruin.github.io/tags/Error/"}],"keywords":[]},{"title":"iOS UI测试","slug":"UITesting","date":"2016-10-20T08:17:51.000Z","updated":"2016-11-11T01:51:29.000Z","comments":true,"path":"2016/10/20/UITesting/","link":"","permalink":"http://dpruin.github.io/2016/10/20/UITesting/","excerpt":"","text":"iOS UI测试前言 UITesting 和 Accessibility 测试app的功能和UI界面是否正确, UI测试可以省去人为直接操作app进行测试。 创建UI测试 File——New——Target——iOS UI Testing Bundle 也可以如下图操作 代码 前提须写的代码：设置UI控件accessibilityIdentifier属性 12345678- (void)viewDidLoad &#123; [super viewDidLoad]; self.userTextField.accessibilityIdentifier = @&quot;userTextField&quot;; self.passwordTextField.accessibilityIdentifier = @&quot;passwordTextField&quot;; // 辅助标识 self.loginBtn.accessibilityIdentifier = @&quot;login&quot;; &#125; 测试样例 123456789101112131415161718192021- (void)testEmptyUserNameAndPassword &#123; // XCUIApplication app对象代理 继承自XCUIElement XCUIApplication *app = [[XCUIApplication alloc] init]; [app.buttons[@&quot;login&quot;] tap]; // XCUIElement UI元素的代理 XCUIElement *label = app.alerts.staticTexts[@&quot;Empty username/password&quot;]; // XCUIElementQuery 查询UI元素的类 XCUIElementQuery *alerts = app.alerts; NSPredicate *alertCount = [NSPredicate predicateWithFormat:@&quot;count == 1&quot;]; // XCUIElementQuery有count属性 ，元素数量 NSPredicate *labelExist = [NSPredicate predicateWithFormat:@&quot;exists == 1&quot;]; // XCUIElement有exists属性，是否存在 [self expectationForPredicate:alertCount evaluatedWithObject:alerts handler:nil]; [self expectationForPredicate:labelExist evaluatedWithObject:label handler:nil]; [self waitForExpectationsWithTimeout:5 handler: nil]; &#125; UI行为录制 将输入光标放在方法实现中，并点击工具栏上的录制按钮，就可以进行实时录制了","categories":[],"tags":[{"name":"UITesting","slug":"UITesting","permalink":"http://dpruin.github.io/tags/UITesting/"},{"name":"测试","slug":"测试","permalink":"http://dpruin.github.io/tags/测试/"}],"keywords":[]},{"title":"Swift3.0相对于2.3语法的一些变化","slug":"Swift3.0WithSwift2.3Changes","date":"2016-10-18T13:37:58.000Z","updated":"2016-11-14T09:50:02.000Z","comments":true,"path":"2016/10/18/Swift3.0WithSwift2.3Changes/","link":"","permalink":"http://dpruin.github.io/2016/10/18/Swift3.0WithSwift2.3Changes/","excerpt":"","text":"Swift3.0相对于2.3语法的一些变化颜色12345// swift 2.3view.backgroundColor = UIColor.redColor()// swift 3.0view.backgroundColor = UIColor.red swift 3.0 删掉了++ –123456789// swift 2.3var a = 0a++a--// swift 3.0 删掉了++ -- var a = 0a += 1a -= 1 Swift 3.0 任意对象AnyObject 简化为Anyinout关键字放在参数名称的后面12345678910111213141516// swift 2.3func swap1(inout a : Int, inout b : Int) &#123; let temp = a a = b b = temp print(&quot;a:\\(a), b:\\(b)&quot;)&#125;// swift 3.0 inout关键字放在参数名称的后面func swap( a: inout Int, b: inout Int) &#123; let temp = a a = b b = temp &#125; 闭包 和 GCD123456789101112131415161718192021222324252627282930313233343536373839// swift 2.3class HttpTool: NSObject &#123; func loadRequest(callBack : ()-&gt;())&#123; dispatch_async(dispatch_get_global_queue(0, 0)) &#123; () -&gt; Void in print(&quot;加载数据&quot;, [NSThread.currentThread()]) dispatch_async(dispatch_get_main_queue(), &#123; () -&gt; Void in callBack() &#125;) &#125; &#125;&#125; override func touchesBegan(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?) &#123; // 网络请求 httpTool.loadRequest (&#123; () -&gt; () in print(&quot;回到主线程&quot;, NSThread.currentThread()); &#125;) &#125;// swift 3.0class HttpTool : NSObject &#123; func loadRequest(callBack: @escaping ()-&gt;()) &#123; DispatchQueue.global().async &#123; print(&quot;加载数据&quot;, Thread.current) DispatchQueue.main.async &#123; callBack() &#125; &#125; &#125;&#125;HttpTool().loadRequest &#123; print(&quot;HH&quot;)&#125; swift3.0 去掉了lazy关键字123456789101112// swift 2.3 lazy var array : [String] = &#123; () -&gt; [String] in return [&quot;why&quot;, &quot;lmj&quot;, &quot;lnj&quot;] &#125;() // swift 3.0 去掉了lazy关键字var array : [String] = &#123; return [&quot;lisi&quot;, &quot;zhangsan&quot;, &quot;wangmazi&quot;]; &#125;()","categories":[],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://dpruin.github.io/tags/Swift/"}],"keywords":[]},{"title":"Xcode8_Warning_Couldn’t communicate with a helper application.","slug":"Xcode_Warning_commit","date":"2016-10-18T13:37:58.000Z","updated":"2016-10-26T03:43:43.000Z","comments":true,"path":"2016/10/18/Xcode_Warning_commit/","link":"","permalink":"http://dpruin.github.io/2016/10/18/Xcode_Warning_commit/","excerpt":"","text":"Xcode8_Warning_Couldn’t communicate with a helper application.警告 升级Xcode8后提交代码，执行commit操作，出现以下警告 升级Xcode8后shift + common + n 创建project，出现以下警告 分析原因Couldn’t communicate with a helper application. 无法与辅助应用程序通信。mac里git需要重新配置。新建project，xcode提醒开发者不能执行commit操作 解决问题打开终端，执行以下命令 1234git config --global user.name ###git config --global user.email ##@##.comgit config -l // 查看","categories":[],"tags":[{"name":"Xcode","slug":"Xcode","permalink":"http://dpruin.github.io/tags/Xcode/"},{"name":"Warning","slug":"Warning","permalink":"http://dpruin.github.io/tags/Warning/"}],"keywords":[]},{"title":"iOS单元测试","slug":"UnitTest","date":"2016-10-18T12:30:41.000Z","updated":"2016-11-10T09:20:27.000Z","comments":true,"path":"2016/10/18/UnitTest/","link":"","permalink":"http://dpruin.github.io/2016/10/18/UnitTest/","excerpt":"","text":"iOS单元测试前言 单元测试使用XCTest框架 单元测试的目标：模型文件 用处：不基于界面UI的情况下，保证模型类的逻辑正确 创建单元测试 File——New——Target——iOS Unit Testing Bundle 也可以如下图操作 默认方法 测试用例文件名约定：以测试类名起始，添加Tests结尾, 如PersonTests.m 类中以test开头的方法且void返回类型的方法都会变成单元测试用例，如下 123456789- (void)testAge&#123; // 在单元测试中一定要有边界测试 Person *p = [[Person alloc] init]; p.age = 17; XCTAssertTrue(p.age &gt;= 18, @&quot;年龄应该大于或等于18岁&quot;); p.age = 61; XCTAssertTrue(p.age &lt;= 60, @&quot;年龄应该小于或等于60岁&quot;);&#125; 默认方法 12345678910111213// 每次测试前调用，可以在测试之前创建在test case方法中需要用到的一些对象等- (void)setUp// 每次测试结束时调用- (void)tearDown//性能测试方法，通过测试block中方法执行的时间，比对设定的标准值和偏差觉得是否可以通过测试 [self measureBlock:^&#123; // Put the code you want to measure the time of here. for (int i = 0; i &lt; 1000; i++) &#123; NSLog(@&quot;时间&quot;); &#125; &#125;]; 断言1234567891011121314151617181920XCTAssert(expression, format...)//Bool测试: XCTAssertTrue(expression, format...)XCTAssertFalse(expression, format...)//相等测试XCTAssertEqual(expression1, expression2, format...)XCTAssertNotEqual(expression1, expression2, format...)//double float 对比数据测试使用XCTAssertEqualWithAccuracy(expression1, expression2, accuracy, format...)XCTAssertNotEqualWithAccuracy(expression1, expression2, accuracy, format...)//Nil测试，XCTAssert[Not]Nil断言判断给定的表达式值是否为nilXCTAssertNil(expression, format...)XCTAssertNotNil(expression, format...)//失败断言 XCTFail(format...) 期望 需要在一定时间之后再进行判断的测试例，可以使用 expectationForPredicate 来对未来的状态作出假设并测试在规定的超时时间内是否得到理想的结果 1234[self expectationForPredicate: 谓词 evaluatedWithObject:被测试对象 handler:nil];// 设置期望的时间[self waitForExpectationsWithTimeout:超时时间 handler: nil];","categories":[],"tags":[{"name":"Unit Test","slug":"Unit-Test","permalink":"http://dpruin.github.io/tags/Unit-Test/"}],"keywords":[]}]}