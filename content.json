{"meta":{"title":"DPRuin","subtitle":"求知若饥，虚心若愚","description":"嗨，我是大朋（DPRuin），一名iOS开发者。","author":"DPRuin","url":"http://dpruin.github.io"},"pages":[{"title":"tags","date":"2016-10-18T01:41:24.000Z","updated":"2016-10-21T14:59:17.000Z","comments":true,"path":"tags/index.html","permalink":"http://dpruin.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"AppStore上架报ERROR ITMS-90535","slug":"Archive_ERRORITEMS-90535","date":"2016-10-21T13:30:06.000Z","updated":"2016-10-24T11:43:53.000Z","comments":true,"path":"2016/10/21/Archive_ERRORITEMS-90535/","link":"","permalink":"http://dpruin.github.io/2016/10/21/Archive_ERRORITEMS-90535/","excerpt":"","text":"AppStore上架报ERROR ITMS-90535错误错误经过使用xcode7打包上传公司的app，app上架–&gt;Archive–&gt;validate过后，并且SUCCESSFUL了。然后开始上传到AppStore时，出现以下错误 This action could not be completed. Try again This action could not be completed. Try again.(-22421) ERROR ITMS-90535错误 分析 “This action could not be completed. Try again”报错是苹果服务器的原因， 再试一次就好了。我是重复了2次就好了，换了时间段重新上传的就成功了 “ERROR ITMS-90535”根据报错的信息是EaseUIResource.Bundle文件出错 解决问题找到相应的bundle包，打开plist文件，删除CFBundleExecutable即可 CFBundleExecutable 在info.plist文件中显示为Executable file","categories":[],"tags":[{"name":"Archive","slug":"Archive","permalink":"http://dpruin.github.io/tags/Archive/"},{"name":"Error","slug":"Error","permalink":"http://dpruin.github.io/tags/Error/"}],"keywords":[]},{"title":"iOS UI测试","slug":"UITesting","date":"2016-10-20T08:17:51.000Z","updated":"2016-11-11T01:51:29.000Z","comments":true,"path":"2016/10/20/UITesting/","link":"","permalink":"http://dpruin.github.io/2016/10/20/UITesting/","excerpt":"","text":"iOS UI测试前言 UITesting 和 Accessibility 测试app的功能和UI界面是否正确, UI测试可以省去人为直接操作app进行测试。 创建UI测试 File——New——Target——iOS UI Testing Bundle 也可以如下图操作 代码 前提须写的代码：设置UI控件accessibilityIdentifier属性 12345678- (void)viewDidLoad &#123; [super viewDidLoad]; self.userTextField.accessibilityIdentifier = @&quot;userTextField&quot;; self.passwordTextField.accessibilityIdentifier = @&quot;passwordTextField&quot;; // 辅助标识 self.loginBtn.accessibilityIdentifier = @&quot;login&quot;; &#125; 测试样例 123456789101112131415161718192021- (void)testEmptyUserNameAndPassword &#123; // XCUIApplication app对象代理 继承自XCUIElement XCUIApplication *app = [[XCUIApplication alloc] init]; [app.buttons[@&quot;login&quot;] tap]; // XCUIElement UI元素的代理 XCUIElement *label = app.alerts.staticTexts[@&quot;Empty username/password&quot;]; // XCUIElementQuery 查询UI元素的类 XCUIElementQuery *alerts = app.alerts; NSPredicate *alertCount = [NSPredicate predicateWithFormat:@&quot;count == 1&quot;]; // XCUIElementQuery有count属性 ，元素数量 NSPredicate *labelExist = [NSPredicate predicateWithFormat:@&quot;exists == 1&quot;]; // XCUIElement有exists属性，是否存在 [self expectationForPredicate:alertCount evaluatedWithObject:alerts handler:nil]; [self expectationForPredicate:labelExist evaluatedWithObject:label handler:nil]; [self waitForExpectationsWithTimeout:5 handler: nil]; &#125; UI行为录制 将输入光标放在方法实现中，并点击工具栏上的录制按钮，就可以进行实时录制了","categories":[],"tags":[{"name":"UITesting","slug":"UITesting","permalink":"http://dpruin.github.io/tags/UITesting/"},{"name":"测试","slug":"测试","permalink":"http://dpruin.github.io/tags/测试/"}],"keywords":[]},{"title":"Xcode8_Warning_Couldn’t communicate with a helper application.","slug":"Xcode_Warning_commit","date":"2016-10-18T13:37:58.000Z","updated":"2016-10-26T03:43:43.000Z","comments":true,"path":"2016/10/18/Xcode_Warning_commit/","link":"","permalink":"http://dpruin.github.io/2016/10/18/Xcode_Warning_commit/","excerpt":"","text":"Xcode8_Warning_Couldn’t communicate with a helper application.警告 升级Xcode8后提交代码，执行commit操作，出现以下警告 升级Xcode8后shift + common + n 创建project，出现以下警告 分析原因Couldn’t communicate with a helper application. 无法与辅助应用程序通信。mac里git需要重新配置。新建project，xcode提醒开发者不能执行commit操作 解决问题打开终端，执行以下命令 1234git config --global user.name ###git config --global user.email ##@##.comgit config -l // 查看","categories":[],"tags":[{"name":"Xcode","slug":"Xcode","permalink":"http://dpruin.github.io/tags/Xcode/"},{"name":"Warning","slug":"Warning","permalink":"http://dpruin.github.io/tags/Warning/"}],"keywords":[]},{"title":"test谷歌广告","slug":"testAds","date":"2016-10-18T13:37:58.000Z","updated":"2016-10-21T02:18:58.000Z","comments":true,"path":"2016/10/18/testAds/","link":"","permalink":"http://dpruin.github.io/2016/10/18/testAds/","excerpt":"","text":"zhouduanzhouduanzhouduanzhouduanzhouduanzhouduanzhouduan大事发生地方 (adsbygoogle = window.adsbygoogle || []).push({});","categories":[],"tags":[{"name":"谷歌","slug":"谷歌","permalink":"http://dpruin.github.io/tags/谷歌/"}],"keywords":[]},{"title":"iOS单元测试","slug":"UnitTest","date":"2016-10-18T12:30:41.000Z","updated":"2016-11-10T09:20:27.000Z","comments":true,"path":"2016/10/18/UnitTest/","link":"","permalink":"http://dpruin.github.io/2016/10/18/UnitTest/","excerpt":"","text":"iOS单元测试前言 单元测试使用XCTest框架 单元测试的目标：模型文件 用处：不基于界面UI的情况下，保证模型类的逻辑正确 创建单元测试 File——New——Target——iOS Unit Testing Bundle 也可以如下图操作 默认方法 测试用例文件名约定：以测试类名起始，添加Tests结尾, 如PersonTests.m 类中以test开头的方法且void返回类型的方法都会变成单元测试用例，如下 123456789- (void)testAge&#123; // 在单元测试中一定要有边界测试 Person *p = [[Person alloc] init]; p.age = 17; XCTAssertTrue(p.age &gt;= 18, @&quot;年龄应该大于或等于18岁&quot;); p.age = 61; XCTAssertTrue(p.age &lt;= 60, @&quot;年龄应该小于或等于60岁&quot;);&#125; 默认方法 12345678910111213// 每次测试前调用，可以在测试之前创建在test case方法中需要用到的一些对象等- (void)setUp// 每次测试结束时调用- (void)tearDown//性能测试方法，通过测试block中方法执行的时间，比对设定的标准值和偏差觉得是否可以通过测试 [self measureBlock:^&#123; // Put the code you want to measure the time of here. for (int i = 0; i &lt; 1000; i++) &#123; NSLog(@&quot;时间&quot;); &#125; &#125;]; 断言1234567891011121314151617181920XCTAssert(expression, format...)//Bool测试: XCTAssertTrue(expression, format...)XCTAssertFalse(expression, format...)//相等测试XCTAssertEqual(expression1, expression2, format...)XCTAssertNotEqual(expression1, expression2, format...)//double float 对比数据测试使用XCTAssertEqualWithAccuracy(expression1, expression2, accuracy, format...)XCTAssertNotEqualWithAccuracy(expression1, expression2, accuracy, format...)//Nil测试，XCTAssert[Not]Nil断言判断给定的表达式值是否为nilXCTAssertNil(expression, format...)XCTAssertNotNil(expression, format...)//失败断言 XCTFail(format...) 期望 需要在一定时间之后再进行判断的测试例，可以使用 expectationForPredicate 来对未来的状态作出假设并测试在规定的超时时间内是否得到理想的结果 1234[self expectationForPredicate: 谓词 evaluatedWithObject:被测试对象 handler:nil];// 设置期望的时间[self waitForExpectationsWithTimeout:超时时间 handler: nil];","categories":[],"tags":[{"name":"Unit Test","slug":"Unit-Test","permalink":"http://dpruin.github.io/tags/Unit-Test/"}],"keywords":[]},{"title":"Hello World","slug":"hello-world","date":"2016-10-17T14:17:35.000Z","updated":"2016-10-17T14:17:35.000Z","comments":true,"path":"2016/10/17/hello-world/","link":"","permalink":"http://dpruin.github.io/2016/10/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}